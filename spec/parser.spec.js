const PTCGOParser = require("../lib/index.js");

const exported_list = `****** Pokémon Trading Card Game Deck List ******

##Pokémon - 13

* 1 Oranguru SUM 113
* 3 Darkrai-EX BKP 74
* 4 Dratini SUM 94
* 3 Dragonair SUM 95
* 1 Dragonite ROS 51
* 1 Mew FAC 29

##Trainer Cards - 32

* 1 Fighting Fury Belt BKP 99
* 2 Ace Trainer AOR 69
* 4 Trainers' Mail ROS 92
* 2 Lillie SUM 122
* 3 Professor's Letter BKT 146
* 1 Super Rod BKT 149
* 2 Lysandre AOR 78
* 3 Professor Sycamore BKP 107
* 1 Lucky Helmet AOR 77
* 1 Switch SUM 132
* 1 Fisherman BKT 136
* 1 Escape Rope PRC 127
1 Special Charge STS 105
* 1 VS Seeker ROS 110
* 3 Ultra Ball SUM 135
* 1 N FAC 105
* 2 Float Stone BKT 137
* 2 Level Ball NXD 89

##Energy - 15

* 4 Double Dragon Energy ROS 97
* 11 Darkness Energy  7
* 4 Water Energy XYEnergy 9

Total Cards - 60

****** Deck List Generated by the Pokémon TCG Online www.pokemon.com/TCGO ******`;

describe("ptcgo-parser", () => {
  it("should ignore headlines", () => {
    const decklist = PTCGOParser.parse(exported_list);
    const header_items = decklist.cards.filter(item =>
      item.name.startsWith("##")
    );

    expect(header_items.length).toBe(0);
  });

  it("should parse Oranguru correctly", () => {
    const decklist = PTCGOParser.parse(exported_list);

    const oranguru = decklist.cards.filter(card => card.name === "Oranguru")[0];

    expect(oranguru.name).toBe("Oranguru");
    expect(oranguru.amount).toBe("1");
    expect(oranguru.set).toBe("SUM");
    expect(oranguru.code).toBe("113");
  });

  it("should work with cards without leading asterisk", () => {
    const decklist = PTCGOParser.parse(exported_list);

    const card = decklist.cards.filter(
      card => card.name === "Special Charge"
    )[0];

    expect(card.name).toBe("Special Charge");
    expect(card.amount).toBe("1");
    expect(card.set).toBe("STS");
    expect(card.code).toBe("105");
  });

  it("should parse correctly basic energy without set code", () => {
    const decklist = PTCGOParser.parse(exported_list);

    const card = decklist.cards.filter(card => card.name === "Darkness")[0];

    expect(card.name).toBe("Darkness");
    expect(card.amount).toBe("11");
    expect(card.set).toBe(undefined);
    expect(card.code).toBe(undefined);
  });

  it("should parse correctly basic energy with a set code", () => {
    const decklist = PTCGOParser.parse(exported_list);

    const card = decklist.cards.filter(card => card.name === "Water")[0];

    expect(card.name).toBe("Water");
    expect(card.amount).toBe("4");
    expect(card.set).toBe(undefined);
    expect(card.code).toBe(undefined);
  });

  it("should parse correctly special energy with a set code", () => {
    const decklist = PTCGOParser.parse(exported_list);

    const card = decklist.cards.filter(
      card => card.name === "Double Dragon Energy"
    )[0];

    expect(card.name).toBe("Double Dragon Energy");
    expect(card.amount).toBe("4");
    expect(card.set).toBe("ROS");
    expect(card.code).toBe("97");
  });
});
